pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
    }
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = 'yourusername/challenger-app'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        SSH_CREDENTIALS = credentials('deploy-server-credentials')
        DEPLOY_SERVER = 'your-server-ip'
    }
    
    stages {
        stage('코드 체크아웃') {
            steps {
                checkout scm
            }
        }
        
        stage('Gradle 빌드') {
            steps {
                sh './gradlew clean build'
            }
        }
        
        stage('Docker 이미지 빌드') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
            }
        }
        
        stage('Docker 이미지 푸시') {
            steps {
                sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE_NAME}:latest"
            }
        }
        
        stage('무중단 배포') {
            steps {
                sshagent(['deploy-server-credentials']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_SERVER} '
                        cd /home/ubuntu/challenger &&
                        git pull &&
                        export DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG} &&
                        ./deploy-blue-green.sh
                        '
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh "docker logout"
            cleanWs()
        }
        success {
            echo '파이프라인이 성공적으로 완료되었습니다!'
        }
        failure {
            echo '파이프라인 실행 중 오류가 발생했습니다.'
        }
    }
} 